{"ast":null,"code":"var _jsxFileName = \"/Users/chanchanchan/F5/proyectos-grupo/front-recette-social-receta2/client/src/pages/RectForm.tsx\";\n// import React, { useEffect, useState } from 'react'\n// import Layout from '../components/Layout'\n// import { Formik } from 'formik';\n// import { getRecipesRequest } from '../api/recep.api';\n\n// export type Recipe = {\n//   title: string;\n//   description: string;\n//   author: any;\n//   ingredientes: Array<any>;\n//   comment: string;\n// }\n\n// function RectForm() {\n\n//   const [recipe, setRecipe] = useState ()\n\n// useEffect(()=>{\n//   async function loadRecipe(){\n//   const response = await getRecipesRequest()\n\n//   console.log(response.data)\n//   }\n\n//     loadRecipe()\n// },[])\n\n//   return (\n//     <div>\n\n//        <div className='nav'>\n//           <img className='img' src={require('../assets/Ellipse 4.png')} alt=\"\" />\n//       </div>\n//       <div className='nav'>\n\n// <img className='img' src={require('../assets/Ellipse 4.png')} alt=\"\" />\n// </div>\n//       <h1>RectForm</h1>\n//       <div>\n//      <Formik \n//         initialValues={{recipe}}\n//         enableReinitialize={true}\n//         onSubmit={async(values, actions)=>{\n//             console.log(values);\n//             if(params.id) {\n//                 // console.log('update')\n//                await updateUser(params.id, values)\n//             } else {\n\n//               await createUser(values);\n//             }\n//             setUser({\n//               title: string;\n//               description: string;\n//               author: any;\n//               ingredientes: Array<any>;\n//               comment: string;\n//             })\n//            actions.resetForm()\n//         }}\n//         >\n//             {({handleChange, handleSubmit, values, isSubmitting})=>(\n\n//             <Form onSubmit={handleSubmit}>\n//             <label>Gmail</label>\n//             <input type=\"text\" \n//             name='gmail'\n//             placeholder='gmail' \n//             onChange={handleChange}\n//             // value={values}\n\n//             />\n//             <label>password</label>\n//             <textarea \n//             name='password' \n//             rows={3} \n//             placeholder= 'password' \n//             onChange={handleChange}>\n//             </textarea>\n//             <button type='submit'> {isSubmitting ? \"Saving...\" : \"Save\"}</button>\n//             </Form>\n//             )}\n//         </Formik>\n//       </div>\n//       <Layout />\n//     </div>\n//   )\n// }\n\n// export default RectForm\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function () {\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"names":["React"],"sources":["/Users/chanchanchan/F5/proyectos-grupo/front-recette-social-receta2/client/src/pages/RectForm.tsx"],"sourcesContent":["// import React, { useEffect, useState } from 'react'\n// import Layout from '../components/Layout'\n// import { Formik } from 'formik';\n// import { getRecipesRequest } from '../api/recep.api';\n\n// export type Recipe = {\n//   title: string;\n//   description: string;\n//   author: any;\n//   ingredientes: Array<any>;\n//   comment: string;\n// }\n\n// function RectForm() {\n\n//   const [recipe, setRecipe] = useState ()\n\n\n// useEffect(()=>{\n//   async function loadRecipe(){\n//   const response = await getRecipesRequest()\n \n//   console.log(response.data)\n//   }\n   \n   \n//     loadRecipe()\n// },[])\n\n\n//   return (\n//     <div>\n      \n//        <div className='nav'>\n//           <img className='img' src={require('../assets/Ellipse 4.png')} alt=\"\" />\n//       </div>\n//       <div className='nav'>\n\n// <img className='img' src={require('../assets/Ellipse 4.png')} alt=\"\" />\n// </div>\n//       <h1>RectForm</h1>\n//       <div>\n//      <Formik \n//         initialValues={{recipe}}\n//         enableReinitialize={true}\n//         onSubmit={async(values, actions)=>{\n//             console.log(values);\n//             if(params.id) {\n//                 // console.log('update')\n//                await updateUser(params.id, values)\n//             } else {\n\n//               await createUser(values);\n//             }\n//             setUser({\n//               title: string;\n//               description: string;\n//               author: any;\n//               ingredientes: Array<any>;\n//               comment: string;\n//             })\n//            actions.resetForm()\n//         }}\n//         >\n//             {({handleChange, handleSubmit, values, isSubmitting})=>(\n\n//             <Form onSubmit={handleSubmit}>\n//             <label>Gmail</label>\n//             <input type=\"text\" \n//             name='gmail'\n//             placeholder='gmail' \n//             onChange={handleChange}\n//             // value={values}\n            \n//             />\n//             <label>password</label>\n//             <textarea \n//             name='password' \n//             rows={3} \n//             placeholder= 'password' \n//             onChange={handleChange}>\n//             </textarea>\n//             <button type='submit'> {isSubmitting ? \"Saving...\" : \"Save\"}</button>\n//             </Form>\n//             )}\n//         </Formik>\n//       </div>\n//       <Layout />\n//     </div>\n//   )\n// }\n\n// export default RectForm\n\nimport React from 'react'\n\nexport default function \n() {\n  return (\n    <div>\n      \n    </div>\n  )\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAAA;AAEzB,eAAe,YACZ;EACD,oBACE;IAAA;IAAA;IAAA;EAAA,QAEM;AAEV"},"metadata":{},"sourceType":"module","externalDependencies":[]}